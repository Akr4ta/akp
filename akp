#!/bin/bash

# Check if the command is not empty
if [ -z "$1" ]; then
    echo "Error: No target selected"
    exit 1
fi

# Creanting package list
packages="${@:2}"

# Translate akp command to pacman, yay and flatpak equivalent command
case "$1" in
    -U)
        # Update system with arch repositories
        sudo pacman -Syu
        ;;
    -Ud)
        # Update system with arch, aur and flatpak repositories)
        sudo pacman -Syu && echo "" && yay -a -Syu && echo "" && flatpak update
        ;;
    -Um)
	# Update mirrors
	sudo reflector --country $packages --protocol https --sort rate --save /etc/pacman.d/mirrorlist && sudo pacman -Syyu
	;;
    -I)
        # Install package

        # Check if at least one package was provided
        if [ -z "$2" ]; then
            echo "Error: Please provide at least one target"
            exit 1
        fi
        
        # Defining pacman command
        pacmanCommand="sudo pacman -S"
       
        # Function to get optional dependencies from Pacman
        get_optional_deps() {
            package="$1"
	    expac -S '%O' "$package" | sed 's/  /\n/g' | sed 's/^\([^:]*\):/ \x1b[0;34m\1\x1b[0m:/'
        }

         # Display optional dependencies
        for pkg in "$@"; do
            if [ "$pkg" != "-I" ]; then
                optionalDeps=$(get_optional_deps "$pkg")
                if [ -n "$optionalDeps" ]; then
                    echo -e "The \033[0;32m$pkg\033[0m package has the following optional dependencies:"
                    
                    # Add " :: " to the beginning of each line
                    echo "$optionalDeps"

                    # Ask the user which optional dependencies they want to install
                    echo -e "Do you want to install any of the optional dependencies for \033[0;32m$pkg\033[0m? (Enter the names separated by spaces): " 
                    read -p "" selectedOptionalDeps
                    echo " "

		    # Add the main packages and the selected optional dependencies to the package list
                    packages="$packages $pkg $selectedOptionalDeps"
                else
                    # If there are no optional dependencies, add only the main package to the list
		    packages="$packages $pkg"
                fi
            fi
        done
	$pacmanCommand $packages
        ;;
    -S)
        # Search package
        pacman -Ss $packages
        ;;
    -R)
        # Remove package
        sudo pacman -R $packages
        ;;
    -Rr)
        # Remove package, dependencies, etc...
        sudo pacman -Rsn $packages
        ;;
    -Qi)
        # Query information about a package
        pacman -Qi $packages
        ;;
    -Ln)
        # List needless packages and their dependencies
        pacman -Qdt
        ;;
    -Qm)
        # Query current mirrors
        cat /etc/pacman.d/mirrorlist
        ;;
    -Ua)
        # Update aur
        yay -a -Syu
        ;;
    -Ia)
        # Install aur package
        yay -S $packages
        ;;
    -Sa)
        # Search aur package
        yay -a -Ss $packages
        ;;
    -La)
        # List installed packages from aur
        pacman -Qm
        ;;
    -Uf)
        # Update flatpak
        flatpak update
        ;;
    -If)
        # Install flatpak package
        flatpak install flathub $packages
        ;;
    -Sf)
        # Search flatpak package
        flatpak search $packages
        ;;
    -Rf)
        # Remove flatpak package
        flatpak uninstall $packages
        ;;
    -Lf)
        # List installed packages from flatpak
        flatpak list
        ;;
    -Qfi)
        # Query flatpak package information
        flatpak info $packages
        ;;
    --help)
        # Help
        echo -e "akp -U   : Update system"
        echo -e "akp -Ud  : Update Distro (Arch, aur and flatpak repositories)"
	    echo -e "akp -Um  : Update Mirros (e.g. akp -Um Brazil,Mexico,Canada)"
        echo -e "akp -I   : \033[1;32mI\033[0mnstall package(s)"
        echo -e "akp -S   : \033[1;32mS\033[0mearch package"
        echo -e "akp -R   : \033[1;32mR\033[0memove package(s)"
        echo -e "akp -Rr  : \033[1;32mR\033[0memove package(s), its dependencies and all the packages that depend on the target package(s)"
        echo -e "akp -Qi  : \033[1;32mQ\033[0muery package \033[1;32mI\033[0mnformation"
        echo -e "akp -Ln  : \033[1;32mL\033[0mist \033[1;32mN\033[0meedless packages and dependencies"
        echo -e "akp -Qm  : \033[1;32mQ\033[0muery current \033[1;32mM\033[0mirrors"
        echo " "
        echo -e "akp -Ua  : \033[1;32mU\033[0mpdate \033[1;32mA\033[0mUR"
        echo -e "akp -Ia  : \033[1;32mI\033[0mnstall \033[1;32mA\033[0mUR package(s)"
        echo -e "akp -Sa  : \033[1;32mS\033[0mearch package in \033[1;32mA\033[0mUR repository"
        echo -e "akp -La  : \033[1;32mL\033[0mist packages from the \033[1;32mA\033[0mUR repository"
        echo " "
	    echo -e "akp -Uf  : \033[1;32mF\033[0mlatpak \033[1;32mU\033[0mpdate"
        echo -e "akp -If  : \033[1;32mI\033[0mnstall \033[1;32mF\033[0mlatpak package"
        echo -e "akp -Sf  : \033[1;32mS\033[0mearch \033[1;32mF\033[0mlatpak package"
        echo -e "akp -Rf  : \033[1;32mR\033[0memove \033[1;32mF\033[0mlatpak package"
        echo -e "akp -Lf  : \033[1;32mL\033[0mist packages from the \033[1;32mF\033[0mlatpak repository"
        echo -e "akp -Qfi : \033[1;32mQ\033[0muery \033[1;32mF\033[0mlatpak package \033[1;32mI\033[0mnformation"
        ;;        
    *)
        echo "akp command not recognized"
        exit 1
        ;;
esac
